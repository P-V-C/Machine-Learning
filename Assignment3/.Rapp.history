head(prostate)
?scale
?optimize
y<-rnorm(1000)#
x<-matrix(rnorm(1000*100),1000,100)
x
?repilcate
?replicate
y<-rnorm(1000)#
x<-matrix(rnorm(1000*100),1000,100)
x
?lda
install.package('lda')
install.packages('lda')
require(lda)
?lda
require(mass)
install.packages('MASS')
require('MASS')
?MASS
?mass
vowels
vowels<-read.table("http://www-stat-class.stanford.edu/%7Etibs/ElemStatLearn/datasets/vowel.train",row.names=1,head=TRUE,sep=",")
class(vowels)
vowelsLda<-lda(y~.,data=vowels)
class(vowelsLda)
names(vowelsLda)
tmp<-vowels[1:5,]
tmp
head(vowels)
predict(vowelsLda,newdata=tmp)
?pmax
?visU
version()
version
require(MASS)
require(ggplot2)
mat<-matrix(1,nrow=2,ncol=2)
mat
1:9
for (i in 1:10){print(i)}
out<-vector()
out
append(out,3)
out
out<-append(out,3)
out
x=seq(1,10,1)
y=seq(0,1,0.1)
plot(x,y)
x
y
length(x)
length(Y)
length(y)
mat<-matrix(c(1,2,3,4),2,2)
mat
as.vector(mat)
unmatrix(mat)
require(gdata)
mat
for (i in mat){print(i)}
rm(list=ls())#
require(ggplot2)#
require(kernlab)#
setwd('~/github/StatML/Assignment3')#
kc100<-read.table('./Data/knollC-train100.dt')#
kc100$V3<-as.factor(kc100$V3)#
kc200<-read.table('./Data/knollC-train200.dt')#
kc200$V3<-as.factor(kc200$V3)#
kc400<-read.table('./Data/knollC-train400.dt')#
kc400$V3<-as.factor(kc400$V3)#
kcTest<-read.table('../Assignment2/Data/knollC-test.dt')#
C<-c(0.1,1,10,100,1000,10000)#
#gamma<-seq(0.1,10,length.out=7)#
gamma<-c(0.00001,0.01,0.05,0.1,1,3,5,7,10000)#
sigma<-sapply(gamma,function(x){sqrt(1/(2*x))})#
cv<-vector()#
test<-vector()#
cvMat<-matrix(0,length(C),length(sigma))#
testMat<-matrix(0,length(C),length(sigma))#
dimnames(cvMat)<-list(C=C,gamma=gamma)#
dimnames(testMat)<-list(C=C,gamma=gamma)#
for (i in 1:length(sigma)){#
  for (j in 1:length(C)){#
    svm<-ksvm(V3~.,data=kc400,kernel='rbfdot',cross=5,C=C[j],kpar=list(sigma=sigma[i]))#
    cvMat[j,i]<-cross(svm)#
    prediction<-predict(svm,kcTest[,c(1,2)])#
    predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]#
    errorRate<-1-sum(predictionTest)/length(predictionTest)#
    testMat[j,i]<-errorRate#
  }#
}#
print(testMat)#
print(cvMat)#
#
#kc400 gamma=1, C=0.01, error: 0.025#
#kc200 sigma=2.236 (gamma=0.1),c=1 error: 0.015#
#kc100 gamma=1, c=1, error: 0.01#
#
#2.2.1#
finalModel<-ksvm(V3~.,data=kc100,kernel='rbfdot',C=1,kpar=list(sigma[4]))#
plot(finalModel,data=kc100)#
#points(-0.23,0,col="red")#
#points(-0.5,0,col="red")#
#points(0,0,col="red")#
#points(0.5,0,col="red")#
#points(1,0,col="red")#
aIndex<-alphaindex(finalModel)#
for (i in aIndex){#
  x<-kc100[i,1]#
  y<-kc100[i,2]#
  points(y,x,col="red")#
}
