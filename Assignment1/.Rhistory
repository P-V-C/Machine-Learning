for (j in sigma){
print(i)
print(j)
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=i,kpar=list(j))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
}
}
#qplot(kc100[,1],kc400[,2],color=kc100[,3])
cvMat<-matrix(cv,nrow=length(C),ncol=length(gamma),byrow=F)
testMat<-matrix(test,nrow=length(C),ncol=length(gamma),byrow=F)
colnames(cvMat)=gamma
rownames(cvMat)=C
colnames(testMat)=gamma
rownames(testMat)=C
print(testMat)
print(svm,data=kc100)
plot(svm,data=kc100)
for (i in sigma){
for (j in C){
print(i)
print(j)
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=i,kpar=list(j))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
}
}
#qplot(kc100[,1],kc400[,2],color=kc100[,3])
cvMat<-matrix(cv,nrow=length(C),ncol=length(gamma),byrow=F)
testMat<-matrix(test,nrow=length(C),ncol=length(gamma),byrow=F)
colnames(cvMat)=gamma
rownames(cvMat)=C
colnames(testMat)=gamma
rownames(testMat)=C
print(testMat)
plot(svm,data=kc100)
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
errorRate
test
testMat<-matrix(test,nrow=length(C),ncol=length(gamma),byrow=F)
testMat
nchars(testMat)
nchar(testMat)
6*9
length(test)
cv<-vector()
test<-vector()
for (i in sigma){
for (j in C){
print(i)
print(j)
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=i,kpar=list(j))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
}
}
#qplot(kc100[,1],kc400[,2],color=kc100[,3])
cvMat<-matrix(cv,nrow=length(C),ncol=length(gamma),byrow=F)
testMat<-matrix(test,nrow=length(C),ncol=length(gamma),byrow=F)
colnames(cvMat)=gamma
rownames(cvMat)=C
colnames(testMat)=gamma
rownames(testMat)=C
print(testMat)
dimnames(testMat)<-list('sigma','C')
dimnames(testMat)<-list(rows='sigma',cols='C')
dims(testMat)
dim(testMat)
dimnames(testMat)<-list(rows=sigma,cols=C)
dimnames(testMat)<-list(rows=C,cols=sigma)
testMat
dimnames(testMat)<-list(rowas=C,cols=sigma)
testMat
dimnames(testMat)<-list(C=C,sigma=sigma)
testMat
dimnames(testMat)<-list(C=C,gamma=gamma)
dimnames(cvMat)<-list(C=C,gamma=gamma)
cvMat
for (i in sigma){
for (j in C){
print(i)
print(j)
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=j,kpar=list(i))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
}
}
#qplot(kc100[,1],kc400[,2],color=kc100[,3])
cvMat<-matrix(cv,nrow=length(gamma),ncol=length(C),byrow=F)
testMat<-matrix(test,nrow=length(gamma),ncol=length(C),byrow=F)
dimnames(cvMat)<-list(C=C,gamma=gamma)
dimnames(testMat)<-list(C=C,gamma=gamma)
print(testMat)
dimnames(cvMat)<-list(gamma=gamma,C=C)
dimnames(testMat)<-list(gamma=gamma,C=C)
print(testMat)
cvMat<-matrix(cv,nrow=length(gamma),ncol=length(C),byrow=T)
testMat<-matrix(test,nrow=length(gamma),ncol=length(C),byrow=T)
dimnames(cvMat)<-list(gamma=gamma,C=C)
dimnames(testMat)<-list(gamma=gamma,C=C)
print(testMat)
cvMat<-matrix(cv,nrow=length(C),ncol=length(gamma),byrow=T)
testMat<-matrix(test,nrow=length(C),ncol=length(gmma),byrow=T)
dimnames(cvMat)<-list(gamma=gamma,C=C)
dimnames(testMat)<-list(gamma=gamma,C=C)
print(testMat)
testMat
test
cvMat<-matrix(cv,nrow=length(C),ncol=length(gamma),byrow=F)
testMat<-matrix(test,nrow=length(C),ncol=length(gmma),byrow=F)
dimnames(cvMat)<-list(gamma=gamma,C=C)
dimnames(testMat)<-list(gamma=gamma,C=C)
print(testMat)
testMat<-matrix(test,nrow=length(C),ncol=length(gmma),byrow=T)
testMat<-matrix(test,nrow=length(C),ncol=length(gamma),byrow=T)
print(testMat)
dimnames(testMat)<-list(gamma=gamma,C=C)
print(testMat)
#
dimnames(testMat)<-list(C=C,gamma=gamma)
testMat
cvMat<-matrix(cv,nrow=length(C),ncol=length(gamma),byrow=F)
testMat<-matrix(test,nrow=length(C),ncol=length(gamma),byrow=F)
dimnames(cvMat)<-list(gamma=gamma,C=C)
dimnames(testMat)<-list(C=C,gamma=gamma)
print(testMat)
sigma[7]
gamma[7]
gamma[9]
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10,kpar=sigma[9]))
ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=j,kpar=list(i))
ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(i))
ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[9]))
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[9])))
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[5])))
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[2])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[2])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[4])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[7])))
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[7])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[6])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[9])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=5,kpar=list(sigma[1])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1,kpar=list(sigma[1])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=100,kpar=list(sigma[1])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(sigma[1])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(sigma[6])),data=kc100)
plot(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(sigma[9])),data=kc100)
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(sigma[9])))
cvMat
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[9])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[1])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=10000,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1,kpar=list(sigma[5])))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1,kpar=list(gamma[5])))
a<-data.frame()
a$rbind(c(3,4,5,6))
rbind(c(3,4,5,6),a)
rbind(c(3,4,3,6),a)
rbind(c(3,4,3,1),a)
a<-data.frame()
rbind(a,c(1,2,3,4))
rbind(a,c(4,5,6,7))
a
rbind(a,c(4,5,6,7))
a<-rbind(a,c(4,5,6,7))
a<-rbind(a,c(1,3,5,0))
a
frame<-data.frame(c('C','gamma','cv.error','test.error'))
frame
frame<-data.frame('C','gamma','cv.error','test.error')
frame
colnames(frame)<-c('C','gamma','cv.error','test.error')
frame
frame
frame<-data.frame()
frame
colnames(frame)<-c('C','gamma','cv.error','test.error')
frame
cv<-vector()
test<-vector()
frame<-data.frame()
for (i in sigma){
for (j in C){
print(i)
print(j)
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=j,kpar=list(i))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
frame<-rbind(c(j,i,cross(svm),errorRate))
}
}
frame
cv<-vector()
test<-vector()
frame<-data.frame()
for (i in sigma){
for (j in C){
print(i)
print(j)
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=j,kpar=list(i))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
frame<-rbind(frame,c(j,i,cross(svm),errorRate))
}
}
colnames(frame)<-c('C','gamma','cv.error','test.error')
frame
cv
test
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(1000)))
cv<-vector()
test<-vector()
frame<-data.frame()
gamma
sigma
sigma[0]
sigma[1]
C
C<-c(0.1,1,10,100,1000,10000)
#gamma<-seq(0.1,10,length.out=7)
gamma<-c(0.01,0.05,0.1,1,3,5,7,100,1000)
sigma<-sapply(gamma,function(x){sqrt(1/(2*x))})
cv<-vector()
test<-vector()
frame<-data.frame()
#cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(1000)))
for (i in 1:length(sigma)){
for (j in 1:length(C)){
svm<-ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=C[i],kpar=list(sigma[i]))
cv<-append(cv,cross(svm))
prediction<-predict(svm,kcTest[,c(1,2)])
predictionTest<-as.numeric(levels(prediction))[prediction]==kcTest[,3]
errorRate<-1-sum(predictionTest)/length(predictionTest)
test<-append(test,errorRate)
frame<-rbind(frame,c(C[j],gamma[i],cross(svm),errorRate))
}
}
colnames(frame)<-c('C','gamma','cv.error','test.error')
frame
sigma
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(7)))
cross(ksvm(V3~.,data=kc100,kernel='rbfdot',cross=5,C=1000,kpar=list(0.0223)))
require(ggplot2)
rm(list=ls())
setwd('~/github/StatML/Assignment3')
nDataTrain<-read.table('./Data/sincTrain50.dt')
qplot(nDataTrain[,1],nDataTrain[,2])+geom_line()
require(ggplot2)
rm(list=ls())
setwd('~/github/StatML/Assignment3')
nDataTrain<-read.table('./Data/sincTrain50.dt')
qplot(nDataTrain[,1],nDataTrain[,2])
x<-seq(-10,10,0.1)
a<-sapply(x,dnorm,-1,1)
b<-sapply(x,dnorm,0,2)
c<-sapply(x,dnorm,2,3)
qplot(x,a)+geom_line()+ylab("y") #gaussian with (-1,1)
qplot(x,b)+geom_line()+ylab("y") #gaussian with (0,2)
qplot(x,c)+geom_line()+ylab("y") #gaussian with (2,3)
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
twoDgauss<-function(N,mu,sig11,sig12,sig21,sig22){
#assumes mean is (mu,mu)
z<-matrix(c(rnorm(N*2)),2,N)
mu<-matrix(replicate(N,mu),2,N)
sigma<-matrix(c(sig11,sig12,sig21,sig22),2,2)
L<-t(chol(sigma))
y<-mu+(L%*%z)
return(y)
}
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
N=100
twoDgauss<-function(N,mu,sig11,sig12,sig21,sig22){
#assumes mean is (mu,mu)
z<-matrix(c(rnorm(N*2)),2,N)
mu<-matrix(replicate(N,mu),2,N)
sigma<-matrix(c(sig11,sig12,sig21,sig22),2,2)
L<-t(chol(sigma))
y<-mu+(L%*%z)
return(y)
}
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
y
dim(y)
y10k<-twoDgauss(N=10000,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
qplot(y[1,],y[2,])+xlab("x")+ylab("y")
qplot(y10k[1,],y10k[2,])+geom_bin2d(aes(fill=log2(..count..)),binwidth=c(0.05,0.05))+xlab("x")+ylab("y")
muML<-matrix(c(mean(y[1,]),mean(y[2,])),2)
sigma1<-function(x,mu){
(x-mu)%*%t((x-mu))
}
y
sigmaAll<-apply(y,2,sigma1,muML) #estimate all covariance matrices
muML
sigmaAll<-apply(y,2,sigma1,muML) #estimate all covariance matrices
sigma<-matrix(apply(sigmaAll,1,sum)/N,2,2) #add covariance matrices and normalize them
signma
sigma
sigmaAll
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/100))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/30))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/20))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/15))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/10))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/5))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/1))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/100))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/15))
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/100))+xlab("marginal distribution p(x1)")+ylab("probability density estimate")+opts(legend.position="none")
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/75))+xlab("marginal distribution p(x1)")+ylab("probability density estimate")+opts(legend.position="none")
qplot(y[2,],binwidth=abs((range(y[2,])[2]-range(y[2,])[1])/15))
qplot(y[2,],binwidth=abs((range(y[2,])[2]-range(y[2,])[1])/20))
qplot(y[2,],binwidth=abs((range(y[2,])[2]-range(y[2,])[1])/15))
qplot(y[2,],binwidth=abs((range(y[2,])[2]-range(y[2,])[1])/100))+xlab("marginal distribution p(x2)")+ylab("probability density estimate")+opts(legend.position="none")
qplot(y[2,],binwidth=abs((range(y[2,])[2]-range(y[2,])[1])/50))+xlab("marginal distribution p(x2)")+ylab("probability density estimate")+opts(legend.position="none")
qplot(y[1,],binwidth=abs((range(y[1,])[2]-range(y[1,])[1])/18))+geom_line(aes(y=sapply(X=seq(-1,3,length.out=100),FUN=dnorm,mean=1,sd=0.3)*20,x=seq(-1,3,length.out=100)),color="red")+xlab("marginal distribution p(x2)")+ylab("probability density estimate")+opts(legend.position="none")
y
N=100
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
hist2d(y[1,],y[2,],nbins=c(10,10))
require(gplots)
hist2d(y[1,],y[2,],nbins=c(10,10))
require(gplots)
require('gplots')
install.packages(gplots)
install.packages('gplots')
require(gplots)
N=100
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
y
hist2d(y[1,],y[2,],nbins=c(10,10))
hist2d(y[1,],y[2,],nbins=c(15,15))
hist2d(y[1,],y[2,],nbins=c(20,20))
qplot(y[1,],y[2,])+geom_bin2d(aes(fill=log2(..count..)),binwidth=c(0.05,0.05))
N=1000
qplot(y[1,],y[2,])+geom_bin2d(aes(fill=log2(..count..)),binwidth=c(0.05,0.05))
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
qplot(y[1,],y[2,])+geom_bin2d(aes(fill=log2(..count..)),binwidth=c(0.05,0.05))
N=10000
y<-twoDgauss(N=N,mu=1,sig11=0.3,sig12=0.2,sig21=0.2,sig22=0.2)
qplot(y[1,],y[2,])+geom_bin2d(aes(fill=log2(..count..)),binwidth=c(0.05,0.05))
expont<-function(y,lambda){
return(lambda*exp(-lambda*y))
}
hy<-function(z,lambda){
return((-1/lambda)*log(1-z))
}
createLists<-function(N){
listExpont<-sapply(seq(0,2,length.out=N),expont,3)
listHy<-sapply(seq(0,1,length.out=N),hy,3)
return(cbind(listExpont,listHy))
}
qplot(x=createLists(1000)[,1],y=seq(0,1,length.out=1000),geom="line") #1000 samples. exp(y)
qplot(x=createLists(1000)[,2],y=seq(0,1,length.out=1000),geom="line") #1000 samples. h(y)
qplot(x=createLists(1000)[,1],y=seq(0,1,length.out=1000),geom="line") #1000 samples. exp(y)
qplot(x=createLists(1000)[,2],y=seq(0,1,length.out=1000),geom="line") #1000 samples. h(y)
qplot(x=createLists(1000)[,1],y=seq(0,1,length.out=1000),geom="line") #1000 samples. exp(y)
N=100 #100 samples
listExpont<-sapply(seq(0,2,length.out=N),expont,3)
listHy<-sapply(seq(0,1,length.out=N),hy,3)
qplot(listExpont,seq(0,1,length.out=N),geom="line")
qplot(listHy,seq(0,1,length.out=N),geom="line")
getmeans<-function(N){
mean(sapply(runif(N),hy,3))
}
means1<-sapply(seq(10,10,length.out=1000),getmeans)
means2<-sapply(seq(100,100,length.out=1000),getmeans)
means3<-sapply(seq(1000,1000,length.out=1000),getmeans)
qplot(listExpont1000,seq(0,2,length.out=N),geom="line")
qqnorm(means1)
qqnorm(means2)
qqnorm(means3)
qqnorm(means1)
qplot(c(10,100,1000),c(sd(means1),sd(means2),sd(means3)))
qplot(c(log10(10),log10(100),log10(1000)),c(sd(means1),sd(means2),sd(means3)))
qplot(c(log10(10),log10(100),log10(1000)),c(sd(means1),sd(means2),sd(means3)))
qplot(c(10,100,1000),c(mad(means1),mad(means2),mad(means3)))+xlab('L')+ylab('mean absolute deviation')
qplot(c(log10(10),log10(100),log10(1000)),c(abs(1/3-mean(means1)),abs(1/3-mean(means2)),abs(1/3-mean(means3))))
require(pixmap)
kande1 = read.pnm("./images/kande1.pnm")
kande1
require(pixmap)
install.packages(pixmap)
install.packages('pixmap')
kande1 = read.pnm("./images/kande1.pnm")
require(pixmap)
kande1 = read.pnm("./images/kande1.pnm")
setwd('~/github/StatML/Assignment1/')
kande1 = read.pnm("./images/kande1.pnm")
kande1 = read.pnm("./images/kande1.pnm")
tll = c(150, 328)  # training: lower left
tur = c(330, 264)  # training: upper right
## Show image and regions
#plot(kande1)
rect(xleft = tll[1], ybottom = 640 - tll[2], xright = tur[1], ytop= 640 - tur[2])
text(tll[1] + 25, 640 - tur[2] + 15, labels= "train")
require(pixmap)
kande1 = read.pnm("./images/kande1.pnm")
# pixel specifications:
tll = c(150, 328)  # training: lower left
tur = c(330, 264)  # training: upper right
## Show image and regions
#plot(kande1)
rect(xleft = tll[1], ybottom = 640 - tll[2], xright = tur[1], ytop= 640 - tur[2])
text(tll[1] + 25, 640 - tur[2] + 15, labels= "train")
qplot(c(10,100,1000),c(1/(mad(means1)^2),1/(mad(means2)^2),1/(mad(means3)^2)))+geom_line(color="red")+xlab('L')+ylab('1/(mean absolute deviation)^2')
ggsave(filename='madstraight.pdf')
require(pixmap)
kande1 = read.pnm("./images/kande1.pnm")
# pixel specifications:
tll = c(150, 328)  # training: lower left
tur = c(330, 264)  # training: upper right
## Show image and regions
#plot(kande1)
rect(xleft = tll[1], ybottom = 640 - tll[2], xright = tur[1], ytop= 640 - tur[2])
text(tll[1] + 25, 640 - tur[2] + 15, labels= "train")
# we subtract from 640 because the plot has origo at lower left corner, now. Don't worry about the subtractions and additions to the x and y parameters to the text-method. These are only there to position the text labels correctly.
require(pixmap)
kande1 = read.pnm("./images/kande1.pnm")
# pixel specifications:
tll = c(150, 328)  # training: lower left
tur = c(330, 264)  # training: upper right
## Show image and regions
plot(kande1)
rect(xleft = tll[1], ybottom = 640 - tll[2], xright = tur[1], ytop= 640 - tur[2])
text(tll[1] + 25, 640 - tur[2] + 15, labels= "train")
train.set = kande1[tur[2]:tll[2], tll[1]:tur[1]]
train = NULL
train.set
train$red = as.vector(getChannels(train.set,"red"))
train$green = as.vector(getChannels(train.set,"green"))
train$blue = as.vector(getChannels(train.set,"blue"))
class(train)
train = as.data.frame(train)
means<-c(mean(train$red),mean(train$green),mean(train$blue))
rownames(means)<-c("red","green","blue")
N<-nrow(train)
means
sigML<- (1/N)*as.matrix(t(train)-means)%*%t((as.matrix(t(train)-means))) # calculate covar
sigma
norm3d <-function(x, mu, sigma){
a<-(1/((2*pi)^(3/2)))*(1/sqrt(det(sigma)))
b<-exp(  -.5*(t(x-mu)) %*% (solve(sigma) %*% (x-mu) ) )
return(a*b)
}
RGB = getChannels(kande1)
norm3d(c(0.95,0,0),means,sigML)
RGB
dim(RGB)
norm3d(c(0.95,0,0),means,sigML)
?apply
RGB
dim(RGB)
prob<-apply(RGB,c(1,2),norm3d,means,sigML)
prob
dim(prob)
plot(pixmapGrey(prob))
probDnorm<-dnorm(RGB,mean=means,sd=sqrt(sigML))
plot(pixmapGrey(probDnorm)) #I'm pretty sure this is wrong. leaving it here for posterity
frame
frame<-data.frame(rowIndex,colIndex,prob_vector) #length(frame)==640*480*3==length(rowIndex)*3 ; first third represents red pixels, second third green pixels, and third third represents blue pixels
prob_vector <- as.vector(prob)
rowIndex<-as.vector(replicate(480,seq(1,640)))
colIndex<-as.vector(sapply(seq(1,480),replicate,n=640))
frame<-data.frame(rowIndex,colIndex,prob_vector) #length(frame)==640*480*3==length(rowIndex)*3 ; first third represents red pixels, second third green pixels, and third third represents blue pixels
Z=sum(prob_vector)
frame
head(frame)
head(RGB)
q_hat_r<-1/Z * sum(  frame$prob_vector * frame$rowIndex  )
q_hat_c<-1/Z * sum(  frame$prob_vector * frame$colIndex  )
plot(pixmapGrey(prob))
points(q_hat_c,q_hat_r,col="red")
plot(pixmapGrey(prob))
points(q_hat_c,q_hat_r,col="red")
q_hat
q_hat_c
q_hat_r
spatial_covariance<-function(mat,q_hat){
q<-mat[1:2]
prob<-mat[3]
(q-q_hat) %*% t(q-q_hat) * as.numeric(prob)
}
q_hat<-c(q_hat_r,q_hat_c)
neo<-as.matrix(frame)
